title: Run the full lifecycle of resource creation, retreival, update, and deletion
import:
	-
		collection: schema
		file: setup/mongodb/schema/Schema.json
	-
		collection: user
		file: t/data/user.root.json
	-
		collection: shadow
		file: t/data/shadow.root.json
default: |
	Resource: http://example.com/resource
	Accept: application/json;q=1
	--user: root:hunter2
---

label: Uploading over non-existant resource returns 201 Created
request: |
	Method: PUT
	Resource: http://example.com/Item
	Content-Type: application/json;profile=http://magnode.org/MongoDBJSONSchema
body: |
	{ "id": "http://example.com/Item"
	, "links": [ {"rel":"self", "href":"{+subject}"}, {"rel":"type", "href":"http://example.com/Item"} ]
	, "collection": "item"
	, "put": {}
	, "type": "object"
	, "properties":
		{ "subject": {"type":"string"}
		}
	}
assert: |
	assert.equal(response.statusCode, 201); // Created
---

label: Uploading instance of the custom type returns 201 Created
request: |
	Method: PUT
	Content-Type: application/json;profile=http://example.com/Item
body: |
	{"subject":"http://example.com/resource", "type":["http://example.com/Item"], "label":"FooTown", "body":"Bar1"}
assert: |
	assert.equal(response.statusCode, 201); // Created
---

label: Delete resource returns 200 OK
request: |
	Method: DELETE
assert: |
	//assert.equal(response.statusCode, 200);
	assert.include([200,204], response.statusCode, 'returns 200 OK or 204 No Content');
---

label: Deleted resource returns 404 Not Found or 410 Gone
request: |
	Method: GET
assert: |
	assert.include([404,410], response.statusCode); // Not Found or Gone
---
